<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>
    <!-- 제이쿼리 3.7.1 minified -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!--axios cdn : axios 사용을 위함-->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <!-- 동적 폼 전송에서는 form에 action을 넣지 않음! 왜냐 다른 페이지로 넘기는게 아닌, 현재 위치에서 변경할거니까!-->
    <form name="register">
      <input
        type="text"
        name="id"
        placeholder="ID"
        pattern="^[a-z0-9]{5,}$"
        required
      />
      <input type="password" name="pw" placeholder="비밀번호" />
      <input type="text" name="name" placeholder="이름" required />

      <!-- 아래 코드는 일반(동기) 폼 전송을 할 때 type submit-->
      <!--  '<input type="submit" />' 은  '<button type="submit"></button>' 와 같다. -->
      <div>
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>
        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios post 전송</button>
        <button type="button" onclick="fetchGet()">fetch get 전송</button>
        <button type="button" onclick="fetchPost()">fetch post 전송</button>
      </div>
    </form>
    <h3 id="result"></h3>
    <script>
      function getData() {
        const form = document.forms['register'];

        // checkVaildity : 선택된 폼의 유효성 검사를 해주는 함수, boolean 값을 반환한다.
        if (!form.checkValidity()) {
          // : 유효성 검사를 했을 때 true가 떴다면 이라는 의미
          // reportVaildity : 유효성 검사를 통과하지 못한 input에 대하여 report한다.
          form.reportValidity();
          return false; // 함수는 return을 만나면 종료된다.
        }

        // getData 라는 함수의 반환값은 총 2가지 형태이다. 1. false 2. object(객체형태)

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        };
        return data;
      }

      function ajaxGet() {
        const data = getData();
        if (!data) return;

        // const form = document.forms["register"]
        // // console.dir(form);
        // // 위에 만들어둔 form 태그 중 name값을 입력하면 해당 input태그만 출력할 수 있다.
        // // console.log(form.id);
        // // 위에 만들어둔 form 태그 중 name값을 입력하면 해당 input태그에 사용자가 입력한 값을 출력할 수 있다.
        // // console.log(form.id.value);

        // const data = {
        //   id: form.id.value,
        //   pw: form.pw.value,
        //   name: form.name.value
      }
      $.ajax({
        type: 'GET', // 폼 속성 중 method에 해당하는 것을 입력한다.
        url: '/ajax', // 폼 속성 중 action에 해당하는 것을 입력한다.
        data: data, // 객체로 데이터를 넣는다.
        // get 요청일 때만 아래와 같이 쿼리로 직접 입력할 수있다.
        // url: `/ajax?id=${data.id}&pw${data.pw}&name${data.name}`
        success: function (result) {
          // 응답을 성공적으로 받았을 경우에 대한 이벤트 핸들러다.
          // 매개변수(result)에 응답이 들어온다.
          console.log(result);
          $('#result').html(`ajax get 요청 성공 ${result.name}님 환영합니다!`);
        },
      });

      function ajaxPost() {
        const data = getData();
        if (!data) return;
        $.ajax({
          type: 'POST',
          url: '/ajax',
          data: data,
          success: function (result) {
            console.log(result);
            //  아래 처럼 미리 선언해두면, 매번 'result.name' 이런식으로 안적어도 된다.
            // const {
            //   name
            // } = result;
            //  $("#result").html(`ajax post 요청 성공 ${name}님 환영합니다.`)
            $('#result').html(
              `ajax post 요청 성공 ${result.name}님 환영합니다.`
            );
          },
        });
      }

      function axiosGet() {
        const data = getData();
        if (!data) return;
        // axios 함수는 promise 객체를 return 한다.
        axios({
          method: 'GET',
          url: '/axios',
          params: data, // get 요청으로 데이터를 보낼 때 params를 사용한다.
          // params 대신 url에 query(`/axios?id=${data.id}&pw${data.pw}&name${data.name}`)를 직접 작성해도 된다.
        }).then((res) => {
          // 서버에서 보내준 응답이 res에 담긴다.
          console.log('res', res);
          console.log('res data', res.data);
          const { name } = res.data;
          $('#result').html(`axios get 요청 성공 ${name}님 환영합니다.`);
        });
      }

      //  -------------- axiosPost --------------

      function axiosPost() {
        const data = getData();
        if (!data) return;
        axios({
          method: 'POST',
          url: '/axios',
          data: data,
        }).then((res) => {
          console.log(res.data);
          const { name } = res.data;
          $('#result').html(`axios post 요청 성공 ${name}님 환영합니다.`);
        });
      }

      //  --------------  위 axiosPost를 async/await 으로 사용하면? --------------
      async function axiosPost() {
        // 동적 폼 전송을 하면서, 폼 유효성 검사도 하고 싶다면?
        // 폼 유효성 검사를 input태그의 pattern, minlength 등의 속성 이용하여 하려고 함!
        // input태그의 pattern, minlength 속성들은 form에 submit이 일어날 때만 동작한다.
        // 우린 지금 form의 submit을 이용하고 있지 않고, 버튼에 함수를 걸어서 이용하고 있으므로 다르게 해야한다!
        // 따라서, js 코드 내에서 폼 유호성 검사를 하는 코드를 작성해서 검사하도록 해야 한다!
        // 방법1
        // const regex = /^[a-z0-9]{3,5}&/, regex.test(form.id.value)
        // 방법2
        // form.checkVaildity()와 form.reportVaildity()를 이용해 input에 작성된 유효성을 검증한다.
        const data = getData();
        // datd에 받아오는 값은 두가지 형태(1. false 2. object(객체형태)) 중 하나이다.
        if (!data) return;
        const res = await axios({
          method: 'POST',
          url: '/axios',
          data: data, // post일 경우 서버에 데이터를 보낼 때, data 키에 데이터를 보내면 된다.
        });
        console.log('res', res);
        console.log('res.data', res.data);
        $('#result').html(
          `axios post 요청 성공 ${res.data.name}님 환영합니다.`
        );
      }

      function fetchGet() {
        const data = getData();
        if (!data) return;
        //  fetch(url, option 객체)
        // url -> action 에 쓰는 그 url
        //option 객체에 method가 있음!
        // fetch는 method 기본값이 get이다.
        // fetch는 get 요청 시 데이터를 query로 만들어서 url과 함께 전송해야한다.

        // const urlQuery = `id=$(data.id)&name=${data.name}&pw=${data.password}`
        // 위처럼 쿼리를 직접 입력하는 건 번거로우므로 쿼리를 만드는 함수를 사용한다. (아래 참고)
        // URLSearchParams : 파라미터를 관리하는 메소드고, 얘의 속성인 toString 을 사용하면 쿼리 모양으로 출력해줌!
        const urlQuery = new URLSearchParams(data).toString();
      }

      // -------------- 방법 1 (then 체이닝 사용) ----------------
      fetch(`/fetch ?${urlQuery}`)
        .then((res) => {
          console.log(res);
          // // json() 메소드를 이용해서 parsing 해야함.
          // // json() 은 promise 기반이므로 동작하는데 시간이 걸림.
          // return res.json();
          // console.log(data) // 이거 출력은 promise pending (undefined) 발생함. (문제발생!)
          return res.json();
        })
        .then((res) => {
          // 위에서 파싱해서 return하고 있기 때문에, 이 함수의 res는 서버에서 내가 응답한 객체이다.
          console.log('파싱', res);
        });

      // -------------- 방법 2 (반만 async/awiat 사용) ----------------
      fetch(`/fetch?${urlQuery}`).then(async (res) => {
        console.log('원본', res);
        console.log('파싱', await res.json());
        // 응답을 파싱해야함.
        //•json(),'•text(),
      });

      //응답을 파싱해야함.
      // .json(), .text()

      // -------------- 방법 3 (async/awiat 사용)----------------
      const oriRes = await fetch(`/fetch ?${urlQuery}`);
      const res = await res.json();
      console.log(res);

      function fetchPost() {
        const data = getData();
        if (!data) return;

        // 원래는 content-type의 기본값 사용: application/x-wwww-form-urlencoded 형태로 사용하고 있었음! (지금까지 한 애들은 전부다 이형식으로 사용했음.)
        // 하지만 fetch post 요청 시엔 content-type의 기본값을 사용하면 동작을 안하므로, 바꿔줘야 한다.
        // content-type을 application/json 형태로 변경해야 한다.
        fetch('/fetch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data), // stringify : data 객체(js형태)를 json 형태로 바꾸는 함수
        })
          .then((res) => {
            return res.json();
          })
          .then((res) => {
            console.log(res);
            $('#result').html(`fetch post 요청 성공 ${res.name}님 환영합니다.`);
          });
      }
    </script>

    <!------------------------------------------------------ 위에는 내가 쓴 코드 아래는 쌤 코드 복붙한 것 -------------------------------------------------------->
    <form name="register">
      <input
        type="text"
        name="id"
        placeholder="ID"
        value="lilyyy"
        pattern="^[a-z0-9]{5,}$"
        title="소문자, 숫자를 이용하여 5글자 이상"
        required
      />
      <input type="password" name="pw" placeholder="password" value="1234" />
      <input type="text" name="name" placeholder="이름" value="lily" required />
      <div>
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>
        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios post 전송</button>
        <button type="button" onclick="fetchGet()">fetch get 전송</button>
        <button type="button" onclick="fetchPost()">fetch post 전송</button>
      </div>
      <!-- 아래 두 줄은 일발(동기) 폼 전송 할 때 type submit-->
      <!-- <input type="submit" /> -->
      <!-- <button type="submit">제출</button> -->
    </form>
    <h3 id="result"></h3>

    <script>
      function getData() {
        const form = document.forms['register'];

        if (!form.checkValidity()) {
          // checkValidity 폼의 유효성 검사를 해서 boolean 값 반환
          form.reportValidity(); // reportValidity: 유효성 검사를 통과하지 못 한 input에 대해 report
          return false;
        }

        // getData라는 함수의 반환값은 총 2가지 형태
        // false | object (객체 형태)

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        };

        return data;
      }

      function ajaxGet() {
        const form = document.forms['register'];
        // console.dir(form);
        // console.log(form.id);
        // console.log(form.id.value);

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        };

        $.ajax({
          type: 'GET', // 폼 속성 중 method
          url: '/ajax', // 폼 속성 중 action
          data: data,
          // url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
          success: function (result) {
            // 응답을 성공적으로 받았을 경우에 대한 이벤트 핸들러
            // 매개변수(result)에 응답이 들어옴
            console.log(result);
            const { name } = result;
            $('#result').html(`ajax get 요청 성공 ${name}님 환영합니다.`);
          },
        });
      }

      function ajaxPost() {
        const data = getData();
        if (!data) return;

        $.ajax({
          type: 'POST',
          url: '/ajax',
          data: data,
          success: function (result) {
            console.log(result);
            $('#result').html(
              `ajax post 요청 성공 ${result.name}님 환영합니다.`
            );
          },
        });
      }

      function axiosGet() {
        const data = getData();
        if (!data) return;

        // axios 함수는 promise 객체를 return
        axios({
          method: 'GET',
          url: '/axios',
          params: data, // get 요청으로 데이터 보낼 때 params 사용
          // params 대신 url에 query를 직접 작성해도 됨
        }).then((res) => {
          // 서버에서 보내준 응답이 res에 담김
          console.log('res', res);
          console.log('res.data', res.data);
          const { name } = res.data;

          $('#result').html(`axios get 요청 성공 ${name}님 환영합니다.`);
        });
      }

      async function axiosPost() {
        // 동적 폼 전송
        // 폼 유효성 검사도 하고 싶음.
        // 폼 유효성 검사를 input 태그의 pattern, minlength, required 등의 속성을 이용하여 하고 싶음

        // input 태그의 pattern, minlength, required 이 속성은 form의 "submit" 이 일어날 때 동작함.
        // 동적 폼 전송은 form 의 "submit" 을 이용하는 게 아님.
        // 따라서, javascript 코드 내에서 폼 유효성 검사를 하는 코드를 작성해야함.
        // 방법 1)
        // const regex = /^[a-z0-9]{5,}$/
        // regex.test(form.id.value)
        // 방법 2)
        // form.checkVaildity()와 form.reportVaildity() 를 이용해서 input에 작성된 유효성을 검증

        const data = getData();
        // data에 받아오는 값은 두가지 형태 중 하나
        // false | object (객체 형태)
        if (!data) return;

        const res = await axios({
          method: 'POST',
          url: '/axios',
          data: data, // post일 경우 서버에 데이터를 보낼 때, data 키에 담아서 보내면 됨.
        });

        console.log('res', res);
        console.log('res.data', res.data);
        $('#result').html(
          `axios post 요청 성공 ${res.data.name}님 환영합니다.`
        );

        // axios({
        //   method: "POST",
        //   url: "/axios",
        //   data: data,
        // }).then((res) => {
        //   console.log(res.data)
        //   const {
        //     name
        //   } = res.data
        //   $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
        // })
      }

      async function fetchGet() {
        const data = getData();
        if (!data) return;

        // fetch(url, option 객체)
        // url -> action
        // option 객체에 method가 있음.
        // fetch는 method 기본값 get
        // fetch는 get 요청 시 데이터를 query로 만들어서 url과 함께 전송
        // const urlQuery = `id=${data.id}&name=${data.naem}&pw=${data.pw}`
        const urlQuery = new URLSearchParams(data).toString();

        // --------------- 방법 1 (then 체이닝)--------------------
        // fetch(`/fetch?${urlQuery}`)
        //   .then((res) => {
        //     console.log("원본", res)
        //     // json() 메소드를 이용해서 parsing 해야 함.
        //     // json() 은 promise 기반
        //     // const data = res.json();
        //     // console.log(data) // Promise pending (undefined) (문제 발생)
        //     return res.json()
        //   }).then((res) => {
        //     // 위에서 파싱 해서 return하고 있기 때문에,
        //     // 이 함수의 res는 서버에서 여러분들이 응답한 객체
        //     console.log("파싱", res)
        //   })

        // --------------- 방법 2 (반만 async / await) --------------------
        // fetch(`/fetch?${urlQuery}`).then(async (res) => {
        //   console.log("원본", res);
        //   console.log("파싱", await res.json());
        //   // 응답을 파싱해야함.
        //   // .json(), .text(),
        // })

        // --------------- 방법 3 (async / await)--------------------
        const oriRes = await fetch(`/fetch?${urlQuery}`);
        const res = await oriRes.json();
        console.log(res);
      }

      function fetchPost() {
        const data = getData();
        if (!data) return;

        // 원래는 content-type 기본값 사용 : application/x-www-form-urlencoded
        // 하지만, fetch post 요청 시에 기본값을 사용했을 때 동작을 안 함
        // content-type을 application/json 형태로 변경
        fetch('/fetch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data), // stringify: data 객체 (js)를 json 형태로 변경
        })
          .then((res) => {
            return res.json();
          })
          .then((res) => {
            console.log(res);
            $('#result').html(`fetch post 요청 성공 ${res.name}님 환영합니다.`);
          });
      }
    </script>
  </body>
</html>
